Аркадий, здравствуйте!

Спасибо за Вашу работу и вопросы.

В первом задании всё верно, но объявление переменной и её инициализацию можно совместить
![](https://u.netology.ngcdn.ru/backend/uploads/markdown_images/image/7790/%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png)

Во втором задании давайте разбираться.
У нас есть множество, которое можно обойти в цикле - индексный массив. И у нас есть длина этого массива. 
Значит создаём цикл который работает `messages.lenght` раз 
![](https://u.netology.ngcdn.ru/backend/uploads/markdown_images/image/7791/%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png)
Обратите внимание, что условие цикла не должно иметь знак "меньше или равно", потому как начиная с нуля мы досчитаем до 4 включительно. Но последний индекс массива равен размер массива -1. На запрос `messages[4]` вы получите `undefined`, что говорит нам об отсутствии элемента под индексом 4.
Поэтому условие цикла д.б. `i < messages.lenght` или, если хотите  `i <= messages.lenght - 1`

Так как мы знаем, что каждую итерацию цикла тело цикла обновляется, а нам нужна структура, чтобы пользоваться ей и после цикла, создаём переменную с массивом в глобальной области видимости. 
![](https://u.netology.ngcdn.ru/backend/uploads/markdown_images/image/7792/%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png)

Теперь нам нужно создать в теле цикла новый объект наполнить его данными из массива messages и запушить (добавить новый элемент) в наш новый массив. Так как на каждой итерации контекст внутри тела цикла обновляется мы каждый раз будем получать новый объект. А раз это цикл со счётчиком, счётчик будет каждый раз указывать на новый элемент нашего исходного массива и данные тоже будут разные.

Если выразить это псевдокодом будет так
![](https://u.netology.ngcdn.ru/backend/uploads/markdown_images/image/7793/%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png)

Сейчас вы создали массив и в цикле добавляете ему __свойства__. Ради эксперимента выведите в консоль весь новый массив, чтобы посмотреть как много данных осталось после цикла. 
Ноша задача обойти весь исходный многомерный массив. В теле цикла создать новый объект. Записать ему свойства которым к=будут соответствовать данные подмассива.
А потом добавить в новый массив этот объект как элемент. Не как свойство.


В третьей задаче, для примера и в качестве подсказки, проследите цепочку до свойства `"mama"` 
![](https://u.netology.ngcdn.ru/backend/uploads/markdown_images/image/7795/%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png)
а вы пытаетесь получить длину 'undefined' потому как свойства wife в объекте user нет. 
https://yadi.sk/i/B6fGPjlYXnYjfw
Чему следует закономерная ошибка 
![](https://u.netology.ngcdn.ru/backend/uploads/markdown_images/image/7798/%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png)
@Ошибка типа: невозможно прочесть свойство `lenght` из undefined.
Потому как исходя их описания в документации undefined является примитивом у которого нет свойств и методов 
![](https://u.netology.ngcdn.ru/backend/uploads/markdown_images/image/7800/%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png)

Управляющий символ переноса каретки на новую строку не совсем соответствует форматированию сообщения по условию задачи 
![](https://u.netology.ngcdn.ru/backend/uploads/markdown_images/image/7796/%D0%B8%D0%B7%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5.png)



В третьей задаче требуется через точечную нотацию установить свойство chats для объекта user. Инициализировать в качестве значения объект.
```
user.chats = {} 
```

в который потом записать массив сообщений из задания.

```
user.chats.nameOfChat = [...]
```
В цикле же нужно вывести на консоль один из чатов.

Нужно внести доработки. Если возникнут вопросы, пишите в слак @Vladislav Utkin или телеграм @tomuraKinly 
